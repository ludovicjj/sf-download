# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    uploads_dir_name: 'uploads'
    uploads_base_url: '%env(SITE_BASE_URL)%/%uploads_dir_name%'
    s3_base_url: '%env(AWS_BASE_URL)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $publicUploadsFilesystem: '@oneup_flysystem.public_uploads_filesystem_filesystem'
            $privateUploadsFilesystem: '@oneup_flysystem.private_uploads_filesystem_filesystem'
            $s3UploadsFilesystem: '@oneup_flysystem.s3_uploads_filesystem_filesystem'
            $uploadBaseUrl: '%uploads_base_url%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    Symfony\Component\Asset\Context\RequestStackContext: '@assets.context'

    Aws\S3\S3Client:
        arguments:
            -
                version: '2006-03-01'
                endpoint: '%env(AWS_ENDPOINT)%'
                region: "region-id"
                credentials:
                    key: '%env(AWS_KEY)%'
                    secret: '%env(AWS_SECRET)%'


    gedmo.listener.timestampable:
        class: Gedmo\Timestampable\TimestampableListener
        tags:
            - { name: doctrine.event_listener, event: 'prePersist' }
            - { name: doctrine.event_listener, event: 'onFlush' }
            - { name: doctrine.event_listener, event: 'loadClassMetadata' }
        calls:
            - [ setAnnotationReader, [ "@annotation_reader" ] ]

    gedmo.listener.sluggable:
        class: Gedmo\Sluggable\SluggableListener
        tags:
            - { name: doctrine.event_listener, event: 'prePersist' }
            - { name: doctrine.event_listener, event: 'onFlush' }
            - { name: doctrine.event_listener, event: 'loadClassMetadata' }
        calls:
            - [ setAnnotationReader, [ "@annotation_reader" ] ]
